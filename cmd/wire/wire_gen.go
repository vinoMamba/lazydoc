// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gofiber/fiber/v3"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"github.com/vinoMamba/lazydoc/internal/handler"
	"github.com/vinoMamba/lazydoc/internal/repository"
	"github.com/vinoMamba/lazydoc/internal/server"
	"github.com/vinoMamba/lazydoc/internal/service"
	"github.com/vinoMamba/lazydoc/internal/service/doc"
	"github.com/vinoMamba/lazydoc/internal/service/project"
	"github.com/vinoMamba/lazydoc/internal/service/user"
	"github.com/vinoMamba/lazydoc/pkg/jwt"
	"github.com/vinoMamba/lazydoc/pkg/mail"
	"github.com/vinoMamba/lazydoc/pkg/redis"
	"github.com/vinoMamba/lazydoc/pkg/sid"
)

// Injectors from wire.go:

func NewApp(viperViper *viper.Viper) (*fiber.App, func(), error) {
	dbtx := repository.NewConn(viperViper)
	queries := repository.New(dbtx)
	sidSid := sid.NewSid()
	jwtJWT := jwt.NewJWT(viperViper)
	mailMail := mail.NewMail(viperViper)
	redisInternal := redis.NewRedisConn(viperViper)
	serviceService := service.NewService(queries, sidSid, jwtJWT, viperViper, mailMail, redisInternal)
	userService := user.NewUserService(serviceService)
	userHandler := handler.NewUserHandler(userService)
	projectService := project.NewProjectService(serviceService)
	projectHandler := handler.NewProjectHandler(projectService)
	docService := doc.NewDocService(serviceService)
	docHandler := handler.NewDocHandler(docService)
	app := server.NewHttpServer(userHandler, projectHandler, docHandler, jwtJWT)
	return app, func() {
	}, nil
}

// wire.go:

var serverSet = wire.NewSet(server.NewHttpServer)

var handlerSet = wire.NewSet(handler.NewUserHandler, handler.NewProjectHandler, handler.NewDocHandler)

var serviceSet = wire.NewSet(service.NewService, user.NewUserService, project.NewProjectService, doc.NewDocService, repository.New, repository.NewConn, redis.NewRedisConn)
