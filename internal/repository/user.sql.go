// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE users
SET is_deleted = true,  deleted_by = $1 ,deleted_at = $2
WHERE id = $3
`

type DeleteUserByIdParams struct {
	DeletedBy pgtype.Text
	DeletedAt pgtype.Timestamp
	ID        string
}

func (q *Queries) DeleteUserById(ctx context.Context, arg DeleteUserByIdParams) error {
	_, err := q.db.Exec(ctx, deleteUserById, arg.DeletedBy, arg.DeletedAt, arg.ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, avatar, password, is_super, is_deleted, deleted_at, created_at, updated_at, created_by, updated_by, deleted_by FROM users 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.IsSuper,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, avatar, password, is_super, is_deleted, deleted_at, created_at, updated_at, created_by, updated_by, deleted_by FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.IsSuper,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getUserList = `-- name: GetUserList :many
SELECT id, username, email, avatar, password, is_super, is_deleted, deleted_at, created_at, updated_at, created_by, updated_by, deleted_by 
FROM users 
WHERE (username LIKE $1 OR email LIKE $2) AND is_deleted = false AND is_super = false
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetUserListParams struct {
	Username string
	Email    string
	Limit    int32
	Offset   int32
}

func (q *Queries) GetUserList(ctx context.Context, arg GetUserListParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserList,
		arg.Username,
		arg.Email,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Avatar,
			&i.Password,
			&i.IsSuper,
			&i.IsDeleted,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserListCount = `-- name: GetUserListCount :one
SELECT COUNT(*) FROM users WHERE username LIKE $1 OR email LIKE $2 AND is_deleted = false AND is_super = false
`

type GetUserListCountParams struct {
	Username string
	Email    string
}

func (q *Queries) GetUserListCount(ctx context.Context, arg GetUserListCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUserListCount, arg.Username, arg.Email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (
  id,username,email,password,created_at,created_by
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type InsertUserParams struct {
	ID        string
	Username  string
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.Text
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}
