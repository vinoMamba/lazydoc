// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteProject = `-- name: DeleteProject :exec
UPDATE projects
SET
  is_deleted = $1, 
  updated_at = $2,
  updated_by = $3
WHERE id = $3
`

type DeleteProjectParams struct {
	IsDeleted pgtype.Bool
	UpdatedAt pgtype.Timestamp
	UpdatedBy pgtype.Text
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.IsDeleted, arg.UpdatedAt, arg.UpdatedBy)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, name, description, is_deleted, created_by, created_at, updated_by, updated_at FROM projects WHERE id = $1 AND is_deleted = false
`

func (q *Queries) GetProjectById(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectList = `-- name: GetProjectList :many
SELECT id, name, description, is_deleted, created_by, created_at, updated_by, updated_at 
FROM projects 
WHERE name LIKE $1 AND is_deleted = false
ORDER BY created_at DESC
`

func (q *Queries) GetProjectList(ctx context.Context, name string) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjectList, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :exec
INSERT INTO projects (
  id,name,description,created_at,created_by
) VALUES (
  $1, $2, $3, $4, $5
)
`

type InsertProjectParams struct {
	ID          string
	Name        string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
	CreatedBy   pgtype.Text
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) error {
	_, err := q.db.Exec(ctx, insertProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects
SET
  name = $1,
  description = $2,
  updated_at = $3,
  updated_by = $4
WHERE id = $5
`

type UpdateProjectParams struct {
	Name        string
	Description pgtype.Text
	UpdatedAt   pgtype.Timestamp
	UpdatedBy   pgtype.Text
	ID          string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.Exec(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
