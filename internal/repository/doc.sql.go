// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: doc.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDoc = `-- name: DeleteDoc :exec
UPDATE documents 
SET
  is_deleted = $1, 
  pre_doc_id = '',
  updated_at = $2,
  updated_by = $3
WHERE id = $4
`

type DeleteDocParams struct {
	IsDeleted pgtype.Bool
	UpdatedAt pgtype.Timestamp
	UpdatedBy pgtype.Text
	ID        string
}

func (q *Queries) DeleteDoc(ctx context.Context, arg DeleteDocParams) error {
	_, err := q.db.Exec(ctx, deleteDoc,
		arg.IsDeleted,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const deleteDocByProjectId = `-- name: DeleteDocByProjectId :exec
UPDATE documents 
SET
  is_deleted = $1, 
  pre_doc_id = '',
  updated_at = $2,
  updated_by = $3
WHERE project_id = $4
`

type DeleteDocByProjectIdParams struct {
	IsDeleted pgtype.Bool
	UpdatedAt pgtype.Timestamp
	UpdatedBy pgtype.Text
	ProjectID pgtype.Text
}

func (q *Queries) DeleteDocByProjectId(ctx context.Context, arg DeleteDocByProjectIdParams) error {
	_, err := q.db.Exec(ctx, deleteDocByProjectId,
		arg.IsDeleted,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ProjectID,
	)
	return err
}

const getDocById = `-- name: GetDocById :one
SELECT id, parent_id, project_id, name, is_folder, is_deleted, created_by, created_at, updated_by, updated_at, is_pin, pre_doc_id, has_children FROM documents WHERE id = $1 AND is_deleted = false
`

func (q *Queries) GetDocById(ctx context.Context, id string) (Document, error) {
	row := q.db.QueryRow(ctx, getDocById, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.IsFolder,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.IsPin,
		&i.PreDocID,
		&i.HasChildren,
	)
	return i, err
}

const getDocByPreDocId = `-- name: GetDocByPreDocId :one
SELECT id, parent_id, project_id, name, is_folder, is_deleted, created_by, created_at, updated_by, updated_at, is_pin, pre_doc_id, has_children FROM documents WHERE pre_doc_id = $1 AND is_deleted = false
`

func (q *Queries) GetDocByPreDocId(ctx context.Context, preDocID pgtype.Text) (Document, error) {
	row := q.db.QueryRow(ctx, getDocByPreDocId, preDocID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.IsFolder,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.IsPin,
		&i.PreDocID,
		&i.HasChildren,
	)
	return i, err
}

const getDocListByParentId = `-- name: GetDocListByParentId :many
SELECT id, parent_id, project_id, name, is_folder, is_deleted, created_by, created_at, updated_by, updated_at, is_pin, pre_doc_id, has_children FROM documents WHERE parent_id = $1 AND is_deleted = false
`

func (q *Queries) GetDocListByParentId(ctx context.Context, parentID pgtype.Text) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocListByParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.IsFolder,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.IsPin,
			&i.PreDocID,
			&i.HasChildren,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocListByProjectId = `-- name: GetDocListByProjectId :many
SELECT id, parent_id, project_id, name, is_folder, is_deleted, created_by, created_at, updated_by, updated_at, is_pin, pre_doc_id, has_children FROM documents WHERE project_id = $1 AND is_deleted = false
`

func (q *Queries) GetDocListByProjectId(ctx context.Context, projectID pgtype.Text) ([]Document, error) {
	rows, err := q.db.Query(ctx, getDocListByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.IsFolder,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.IsPin,
			&i.PreDocID,
			&i.HasChildren,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirstDocByParentId = `-- name: GetFirstDocByParentId :one
SELECT id, parent_id, project_id, name, is_folder, is_deleted, created_by, created_at, updated_by, updated_at, is_pin, pre_doc_id, has_children FROM documents WHERE parent_id = $1 AND (pre_doc_id IS NULL OR pre_doc_id = '' ) AND is_deleted = false
`

func (q *Queries) GetFirstDocByParentId(ctx context.Context, parentID pgtype.Text) (Document, error) {
	row := q.db.QueryRow(ctx, getFirstDocByParentId, parentID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.IsFolder,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.IsPin,
		&i.PreDocID,
		&i.HasChildren,
	)
	return i, err
}

const insertDoc = `-- name: InsertDoc :exec
INSERT INTO documents (
  id,parent_id,project_id,name,is_folder,created_at,created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
`

type InsertDocParams struct {
	ID        string
	ParentID  pgtype.Text
	ProjectID pgtype.Text
	Name      string
	IsFolder  pgtype.Bool
	CreatedAt pgtype.Timestamp
	CreatedBy pgtype.Text
}

func (q *Queries) InsertDoc(ctx context.Context, arg InsertDocParams) error {
	_, err := q.db.Exec(ctx, insertDoc,
		arg.ID,
		arg.ParentID,
		arg.ProjectID,
		arg.Name,
		arg.IsFolder,
		arg.CreatedAt,
		arg.CreatedBy,
	)
	return err
}

const updateDoc = `-- name: UpdateDoc :exec
UPDATE documents 
SET
  name = $1,
  parent_id = $2,
  updated_at = $3,
  updated_by = $4
WHERE id = $5
`

type UpdateDocParams struct {
	Name      string
	ParentID  pgtype.Text
	UpdatedAt pgtype.Timestamp
	UpdatedBy pgtype.Text
	ID        string
}

func (q *Queries) UpdateDoc(ctx context.Context, arg UpdateDocParams) error {
	_, err := q.db.Exec(ctx, updateDoc,
		arg.Name,
		arg.ParentID,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateDocPreDocId = `-- name: UpdateDocPreDocId :exec
UPDATE documents 
SET pre_doc_id = $1 WHERE id = $2
`

type UpdateDocPreDocIdParams struct {
	PreDocID pgtype.Text
	ID       string
}

func (q *Queries) UpdateDocPreDocId(ctx context.Context, arg UpdateDocPreDocIdParams) error {
	_, err := q.db.Exec(ctx, updateDocPreDocId, arg.PreDocID, arg.ID)
	return err
}
